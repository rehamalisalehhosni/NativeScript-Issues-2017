"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var modal_dialog_1 = require("nativescript-angular/modal-dialog");
var core_1 = require("@angular/core");
var modal_view_1 = require("./modal-view");
var ItemsComponent = (function () {
    function ItemsComponent(_modalService, vcRef) {
        this._modalService = _modalService;
        this.vcRef = vcRef;
        this.weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        var oneDay = 24 * 60 * 60 * 1000;
        this.startDate = new Date("2015-12-12");
        this.endDate = new Date();
        this.date = new Date();
        this.days = Math.round(Math.abs((this.startDate.getTime() - this.endDate.getTime()) / (oneDay)));
        this.weekday = this.weekdays[this.date.getDay()];
    }
    ItemsComponent.prototype.createModelView = function (args) {
        var _this = this;
        var that = this;
        var currentDate = new Date();
        var options = {
            viewContainerRef: this.vcRef,
            context: currentDate.toDateString(),
            fullscreen: false
        };
        // >> returning-result
        this._modalService.showModal(modal_view_1.ModalViewComponent, options)
            .then(function (dateresult) {
            console.log("Closed!!!!");
            console.log("date result " + dateresult);
            // >> (hide)
            if (args === "start") {
                _this.startDate = dateresult;
            }
            else if (args === "end") {
                _this.endDate = dateresult;
            }
            else if (args === "findTheDay") {
                _this.date = dateresult;
                _this.weekday = _this.weekdays[_this.date.getDay()];
            }
            // << (hide)
        });
        // << returning-result
    };
    ItemsComponent.prototype.findDays = function () {
        var oneDay = 24 * 60 * 60 * 1000;
        if (this.startDate.getTime() > this.endDate.getTime()) {
            alert("Enter correct end date");
        }
        else {
            var tmpDays = Math.round(Math.abs((this.startDate.getTime() - this.endDate.getTime()) / (oneDay)));
            console.log(tmpDays);
            this.days = tmpDays;
        }
    };
    return ItemsComponent;
}());
ItemsComponent = __decorate([
    core_1.Component({
        selector: "ns-items",
        moduleId: module.id,
        templateUrl: "./items.component.html"
    }),
    __metadata("design:paramtypes", [modal_dialog_1.ModalDialogService, core_1.ViewContainerRef])
], ItemsComponent);
exports.ItemsComponent = ItemsComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXRlbXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0VBQStIO0FBQy9ILHNDQUE0RDtBQUU1RCwyQ0FBa0Q7QUFPbEQsSUFBYSxjQUFjO0lBUXZCLHdCQUFvQixhQUFpQyxFQUFVLEtBQXVCO1FBQWxFLGtCQUFhLEdBQWIsYUFBYSxDQUFvQjtRQUFVLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBRi9FLGFBQVEsR0FBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRzdGLElBQUksTUFBTSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBR3JELENBQUM7SUFFRCx3Q0FBZSxHQUFmLFVBQWdCLElBQUk7UUFBcEIsaUJBNEJDO1FBM0JHLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixJQUFJLFdBQVcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzdCLElBQUksT0FBTyxHQUF1QjtZQUM5QixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsS0FBSztZQUM1QixPQUFPLEVBQUUsV0FBVyxDQUFDLFlBQVksRUFBRTtZQUNuQyxVQUFVLEVBQUUsS0FBSztTQUNwQixDQUFDO1FBQ0Ysc0JBQXNCO1FBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLCtCQUFrQixFQUFFLE9BQU8sQ0FBQzthQUNwRCxJQUFJLENBQUMsVUFBQyxVQUFnQjtZQUVuQixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFBO1lBRXpCLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxHQUFHLFVBQVUsQ0FBQyxDQUFDO1lBQ3pDLFlBQVk7WUFDWixFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDbkIsS0FBSSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUM7WUFDaEMsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDeEIsS0FBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUM7WUFDOUIsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQztnQkFDL0IsS0FBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7Z0JBQ3ZCLEtBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7WUFDckQsQ0FBQztZQUNELFlBQVk7UUFDaEIsQ0FBQyxDQUFDLENBQUM7UUFDUCxzQkFBc0I7SUFFMUIsQ0FBQztJQUVELGlDQUFRLEdBQVI7UUFDSSxJQUFJLE1BQU0sR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDakMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNwRCxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUNwQyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuRyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLENBQUM7SUFDTCxDQUFDO0lBQ0wscUJBQUM7QUFBRCxDQUFDLEFBM0RELElBMkRDO0FBM0RZLGNBQWM7SUFMMUIsZ0JBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxVQUFVO1FBQ3BCLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUNuQixXQUFXLEVBQUUsd0JBQXdCO0tBQ3hDLENBQUM7cUNBU3FDLGlDQUFrQixFQUFpQix1QkFBZ0I7R0FSN0UsY0FBYyxDQTJEMUI7QUEzRFksd0NBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2RhbERpYWxvZ1NlcnZpY2UsIE1vZGFsRGlhbG9nT3B0aW9ucywgTW9kYWxEaWFsb2dQYXJhbXMsIE1vZGFsRGlhbG9nSG9zdCB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9tb2RhbC1kaWFsb2dcIjtcbmltcG9ydCB7IENvbXBvbmVudCwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBEYXRlUGlja2VyIH0gZnJvbSBcInVpL2RhdGUtcGlja2VyXCI7XG5pbXBvcnQgeyBNb2RhbFZpZXdDb21wb25lbnQgfSBmcm9tIFwiLi9tb2RhbC12aWV3XCI7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcIm5zLWl0ZW1zXCIsXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcbiAgICB0ZW1wbGF0ZVVybDogXCIuL2l0ZW1zLmNvbXBvbmVudC5odG1sXCJcbn0pXG5leHBvcnQgY2xhc3MgSXRlbXNDb21wb25lbnQge1xuICAgIHB1YmxpYyBzdGFydERhdGU6IERhdGU7XG4gICAgcHVibGljIGVuZERhdGU6IERhdGU7XG4gICAgcHVibGljIGRhdGU6IERhdGU7XG4gICAgcHVibGljIGRheXM6IG51bWJlcjtcbiAgICBwdWJsaWMgd2Vla2RheTogc3RyaW5nO1xuICAgIHB1YmxpYyB3ZWVrZGF5cyA9IFtcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCJdO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfbW9kYWxTZXJ2aWNlOiBNb2RhbERpYWxvZ1NlcnZpY2UsIHByaXZhdGUgdmNSZWY6IFZpZXdDb250YWluZXJSZWYpIHtcbiAgICAgICAgbGV0IG9uZURheSA9IDI0ICogNjAgKiA2MCAqIDEwMDA7XG4gICAgICAgIHRoaXMuc3RhcnREYXRlID0gbmV3IERhdGUoXCIyMDE1LTEyLTEyXCIpO1xuICAgICAgICB0aGlzLmVuZERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB0aGlzLmRheXMgPSBNYXRoLnJvdW5kKE1hdGguYWJzKCh0aGlzLnN0YXJ0RGF0ZS5nZXRUaW1lKCkgLSB0aGlzLmVuZERhdGUuZ2V0VGltZSgpKSAvIChvbmVEYXkpKSk7XG4gICAgICAgIHRoaXMud2Vla2RheSA9IHRoaXMud2Vla2RheXNbdGhpcy5kYXRlLmdldERheSgpXTtcblxuICAgICAgICBcbiAgICB9XG5cbiAgICBjcmVhdGVNb2RlbFZpZXcoYXJncykge1xuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG4gICAgICAgIGxldCBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGxldCBvcHRpb25zOiBNb2RhbERpYWxvZ09wdGlvbnMgPSB7XG4gICAgICAgICAgICB2aWV3Q29udGFpbmVyUmVmOiB0aGlzLnZjUmVmLFxuICAgICAgICAgICAgY29udGV4dDogY3VycmVudERhdGUudG9EYXRlU3RyaW5nKCksXG4gICAgICAgICAgICBmdWxsc2NyZWVuOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICAvLyA+PiByZXR1cm5pbmctcmVzdWx0XG4gICAgICAgIHRoaXMuX21vZGFsU2VydmljZS5zaG93TW9kYWwoTW9kYWxWaWV3Q29tcG9uZW50LCBvcHRpb25zKVxuICAgICAgICAgICAgLnRoZW4oKGRhdGVyZXN1bHQ6IERhdGUpID0+IHtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2xvc2VkISEhIVwiKVxuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJkYXRlIHJlc3VsdCBcIiArIGRhdGVyZXN1bHQpO1xuICAgICAgICAgICAgICAgIC8vID4+IChoaWRlKVxuICAgICAgICAgICAgICAgIGlmIChhcmdzID09PSBcInN0YXJ0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydERhdGUgPSBkYXRlcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJncyA9PT0gXCJlbmRcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZERhdGUgPSBkYXRlcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJncyA9PT0gXCJmaW5kVGhlRGF5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlID0gZGF0ZXJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5ID0gdGhpcy53ZWVrZGF5c1t0aGlzLmRhdGUuZ2V0RGF5KCldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyA8PCAoaGlkZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAvLyA8PCByZXR1cm5pbmctcmVzdWx0XG5cbiAgICB9XG5cbiAgICBmaW5kRGF5cygpIHtcbiAgICAgICAgbGV0IG9uZURheSA9IDI0ICogNjAgKiA2MCAqIDEwMDA7XG4gICAgICAgIGlmICh0aGlzLnN0YXJ0RGF0ZS5nZXRUaW1lKCkgPiB0aGlzLmVuZERhdGUuZ2V0VGltZSgpKSB7XG4gICAgICAgICAgICBhbGVydChcIkVudGVyIGNvcnJlY3QgZW5kIGRhdGVcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgdG1wRGF5cyA9IE1hdGgucm91bmQoTWF0aC5hYnMoKHRoaXMuc3RhcnREYXRlLmdldFRpbWUoKSAtIHRoaXMuZW5kRGF0ZS5nZXRUaW1lKCkpIC8gKG9uZURheSkpKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRtcERheXMpO1xuICAgICAgICAgICAgdGhpcy5kYXlzID0gdG1wRGF5cztcbiAgICAgICAgfVxuICAgIH1cbn0iXX0=