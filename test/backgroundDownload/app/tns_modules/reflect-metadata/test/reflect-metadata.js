// 4.1.2 Reflect.metadata ( metadataKey, metadataValue )
// https://rbuckton.github.io/reflect-metadata/#reflect.metadata
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("../Reflect");
var chai_1 = require("chai");
describe("Reflect.metadata", function () {
    it("ReturnsDecoratorFunction", function () {
        var result = Reflect.metadata("key", "value");
        chai_1.assert.equal(typeof result, "function");
    });
    it("DecoratorThrowsWithInvalidTargetWithTargetKey", function () {
        var decorator = Reflect.metadata("key", "value");
        chai_1.assert.throws(function () { return decorator(undefined, "name"); }, TypeError);
    });
    it("DecoratorThrowsWithInvalidTargetKey", function () {
        var decorator = Reflect.metadata("key", "value");
        chai_1.assert.throws(function () { return decorator({}, {}); }, TypeError);
    });
    it("OnTargetWithoutTargetKey", function () {
        var decorator = Reflect.metadata("key", "value");
        var target = function () { };
        decorator(target);
        var result = Reflect.hasOwnMetadata("key", target, undefined);
        chai_1.assert.equal(result, true);
    });
    it("OnTargetWithTargetKey", function () {
        var decorator = Reflect.metadata("key", "value");
        var target = {};
        decorator(target, "name");
        var result = Reflect.hasOwnMetadata("key", target, "name");
        chai_1.assert.equal(result, true);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmbGVjdC1tZXRhZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlZmxlY3QtbWV0YWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0RBQXdEO0FBQ3hELGdFQUFnRTs7O0FBRWhFLHNCQUFvQjtBQUNwQiw2QkFBOEI7QUFFOUIsUUFBUSxDQUFDLGtCQUFrQixFQUFFO0lBQ3pCLEVBQUUsQ0FBQywwQkFBMEIsRUFBRTtRQUMzQixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM5QyxhQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLCtDQUErQyxFQUFFO1FBQ2hELElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pELGFBQU0sQ0FBQyxNQUFNLENBQUMsY0FBTSxPQUFBLFNBQVMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLEVBQTVCLENBQTRCLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDakUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMscUNBQXFDLEVBQUU7UUFDdEMsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakQsYUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFNLE9BQUEsU0FBUyxDQUFDLEVBQUUsRUFBTyxFQUFFLENBQUMsRUFBdEIsQ0FBc0IsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywwQkFBMEIsRUFBRTtRQUMzQixJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNqRCxJQUFJLE1BQU0sR0FBRyxjQUFhLENBQUMsQ0FBQTtRQUMzQixTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFbEIsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzlELGFBQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHVCQUF1QixFQUFFO1FBQ3hCLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pELElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQTtRQUNmLFNBQVMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFMUIsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzNELGFBQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA0LjEuMiBSZWZsZWN0Lm1ldGFkYXRhICggbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUgKVxyXG4vLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNyZWZsZWN0Lm1ldGFkYXRhXHJcblxyXG5pbXBvcnQgXCIuLi9SZWZsZWN0XCI7XHJcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gXCJjaGFpXCI7XHJcblxyXG5kZXNjcmliZShcIlJlZmxlY3QubWV0YWRhdGFcIiwgKCkgPT4ge1xyXG4gICAgaXQoXCJSZXR1cm5zRGVjb3JhdG9yRnVuY3Rpb25cIiwgKCkgPT4ge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBSZWZsZWN0Lm1ldGFkYXRhKFwia2V5XCIsIFwidmFsdWVcIik7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiByZXN1bHQsIFwiZnVuY3Rpb25cIik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdChcIkRlY29yYXRvclRocm93c1dpdGhJbnZhbGlkVGFyZ2V0V2l0aFRhcmdldEtleVwiLCAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGRlY29yYXRvciA9IFJlZmxlY3QubWV0YWRhdGEoXCJrZXlcIiwgXCJ2YWx1ZVwiKTtcclxuICAgICAgICBhc3NlcnQudGhyb3dzKCgpID0+IGRlY29yYXRvcih1bmRlZmluZWQsIFwibmFtZVwiKSwgVHlwZUVycm9yKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwiRGVjb3JhdG9yVGhyb3dzV2l0aEludmFsaWRUYXJnZXRLZXlcIiwgKCkgPT4ge1xyXG4gICAgICAgIGxldCBkZWNvcmF0b3IgPSBSZWZsZWN0Lm1ldGFkYXRhKFwia2V5XCIsIFwidmFsdWVcIik7XHJcbiAgICAgICAgYXNzZXJ0LnRocm93cygoKSA9PiBkZWNvcmF0b3Ioe30sIDxhbnk+e30pLCBUeXBlRXJyb3IpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJPblRhcmdldFdpdGhvdXRUYXJnZXRLZXlcIiwgKCkgPT4ge1xyXG4gICAgICAgIGxldCBkZWNvcmF0b3IgPSBSZWZsZWN0Lm1ldGFkYXRhKFwia2V5XCIsIFwidmFsdWVcIik7XHJcbiAgICAgICAgbGV0IHRhcmdldCA9IGZ1bmN0aW9uICgpIHt9XHJcbiAgICAgICAgZGVjb3JhdG9yKHRhcmdldCk7XHJcblxyXG4gICAgICAgIGxldCByZXN1bHQgPSBSZWZsZWN0Lmhhc093bk1ldGFkYXRhKFwia2V5XCIsIHRhcmdldCwgdW5kZWZpbmVkKTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0LCB0cnVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwiT25UYXJnZXRXaXRoVGFyZ2V0S2V5XCIsICgpID0+IHtcclxuICAgICAgICBsZXQgZGVjb3JhdG9yID0gUmVmbGVjdC5tZXRhZGF0YShcImtleVwiLCBcInZhbHVlXCIpO1xyXG4gICAgICAgIGxldCB0YXJnZXQgPSB7fVxyXG4gICAgICAgIGRlY29yYXRvcih0YXJnZXQsIFwibmFtZVwiKTtcclxuXHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IFJlZmxlY3QuaGFzT3duTWV0YWRhdGEoXCJrZXlcIiwgdGFyZ2V0LCBcIm5hbWVcIik7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdCwgdHJ1ZSk7XHJcbiAgICB9KTtcclxufSk7Il19