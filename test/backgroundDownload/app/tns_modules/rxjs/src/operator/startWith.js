"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ArrayObservable_1 = require("../observable/ArrayObservable");
var ScalarObservable_1 = require("../observable/ScalarObservable");
var EmptyObservable_1 = require("../observable/EmptyObservable");
var concat_1 = require("./concat");
var isScheduler_1 = require("../util/isScheduler");
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the items you specify as arguments before it begins to emit
 * items emitted by the source Observable.
 *
 * <img src="./img/startWith.png" width="100%">
 *
 * @param {...T} values - Items you want the modified Observable to emit first.
 * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling
 * the emissions of the `next` notifications.
 * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items
 * emitted by the source Observable.
 * @method startWith
 * @owner Observable
 */
function startWith() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        array[_i] = arguments[_i];
    }
    var scheduler = array[array.length - 1];
    if (isScheduler_1.isScheduler(scheduler)) {
        array.pop();
    }
    else {
        scheduler = null;
    }
    var len = array.length;
    if (len === 1) {
        return concat_1.concatStatic(new ScalarObservable_1.ScalarObservable(array[0], scheduler), this);
    }
    else if (len > 1) {
        return concat_1.concatStatic(new ArrayObservable_1.ArrayObservable(array, scheduler), this);
    }
    else {
        return concat_1.concatStatic(new EmptyObservable_1.EmptyObservable(scheduler), this);
    }
}
exports.startWith = startWith;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnRXaXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhcnRXaXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsaUVBQWdFO0FBQ2hFLG1FQUFrRTtBQUNsRSxpRUFBZ0U7QUFDaEUsbUNBQXdDO0FBQ3hDLG1EQUFrRDtBQVVsRCxtQ0FBbUM7QUFFbkM7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUNIO0lBQWtELGVBQStCO1NBQS9CLFVBQStCLEVBQS9CLHFCQUErQixFQUEvQixJQUErQjtRQUEvQiwwQkFBK0I7O0lBQy9FLElBQUksU0FBUyxHQUFlLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BELEVBQUUsQ0FBQyxDQUFDLHlCQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNCLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVELElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDekIsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxNQUFNLENBQUMscUJBQVksQ0FBQyxJQUFJLG1DQUFnQixDQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBaUIsSUFBSSxDQUFDLENBQUM7SUFDNUYsQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQixNQUFNLENBQUMscUJBQVksQ0FBQyxJQUFJLGlDQUFlLENBQVMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxFQUFpQixJQUFJLENBQUMsQ0FBQztJQUMxRixDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixNQUFNLENBQUMscUJBQVksQ0FBQyxJQUFJLGlDQUFlLENBQUksU0FBUyxDQUFDLEVBQWlCLElBQUksQ0FBQyxDQUFDO0lBQzlFLENBQUM7QUFDSCxDQUFDO0FBaEJELDhCQWdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElTY2hlZHVsZXIgfSBmcm9tICcuLi9TY2hlZHVsZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgQXJyYXlPYnNlcnZhYmxlIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9BcnJheU9ic2VydmFibGUnO1xuaW1wb3J0IHsgU2NhbGFyT2JzZXJ2YWJsZSB9IGZyb20gJy4uL29ic2VydmFibGUvU2NhbGFyT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBFbXB0eU9ic2VydmFibGUgfSBmcm9tICcuLi9vYnNlcnZhYmxlL0VtcHR5T2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBjb25jYXRTdGF0aWMgfSBmcm9tICcuL2NvbmNhdCc7XG5pbXBvcnQgeyBpc1NjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvaXNTY2hlZHVsZXInO1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGggKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydFdpdGg8VD4odGhpczogT2JzZXJ2YWJsZTxUPiwgdjE6IFQsIHNjaGVkdWxlcj86IElTY2hlZHVsZXIpOiBPYnNlcnZhYmxlPFQ+O1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0V2l0aDxUPih0aGlzOiBPYnNlcnZhYmxlPFQ+LCB2MTogVCwgdjI6IFQsIHNjaGVkdWxlcj86IElTY2hlZHVsZXIpOiBPYnNlcnZhYmxlPFQ+O1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0V2l0aDxUPih0aGlzOiBPYnNlcnZhYmxlPFQ+LCB2MTogVCwgdjI6IFQsIHYzOiBULCBzY2hlZHVsZXI/OiBJU2NoZWR1bGVyKTogT2JzZXJ2YWJsZTxUPjtcbmV4cG9ydCBmdW5jdGlvbiBzdGFydFdpdGg8VD4odGhpczogT2JzZXJ2YWJsZTxUPiwgdjE6IFQsIHYyOiBULCB2MzogVCwgdjQ6IFQsIHNjaGVkdWxlcj86IElTY2hlZHVsZXIpOiBPYnNlcnZhYmxlPFQ+O1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0V2l0aDxUPih0aGlzOiBPYnNlcnZhYmxlPFQ+LCB2MTogVCwgdjI6IFQsIHYzOiBULCB2NDogVCwgdjU6IFQsIHNjaGVkdWxlcj86IElTY2hlZHVsZXIpOiBPYnNlcnZhYmxlPFQ+O1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0V2l0aDxUPih0aGlzOiBPYnNlcnZhYmxlPFQ+LCB2MTogVCwgdjI6IFQsIHYzOiBULCB2NDogVCwgdjU6IFQsIHY2OiBULCBzY2hlZHVsZXI/OiBJU2NoZWR1bGVyKTogT2JzZXJ2YWJsZTxUPjtcbmV4cG9ydCBmdW5jdGlvbiBzdGFydFdpdGg8VD4odGhpczogT2JzZXJ2YWJsZTxUPiwgLi4uYXJyYXk6IEFycmF5PFQgfCBJU2NoZWR1bGVyPik6IE9ic2VydmFibGU8VD47XG4vKiB0c2xpbnQ6ZW5hYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuXG4vKipcbiAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSBpdGVtcyB5b3Ugc3BlY2lmeSBhcyBhcmd1bWVudHMgYmVmb3JlIGl0IGJlZ2lucyB0byBlbWl0XG4gKiBpdGVtcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL3N0YXJ0V2l0aC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBAcGFyYW0gey4uLlR9IHZhbHVlcyAtIEl0ZW1zIHlvdSB3YW50IHRoZSBtb2RpZmllZCBPYnNlcnZhYmxlIHRvIGVtaXQgZmlyc3QuXG4gKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcl0gLSBBIHtAbGluayBJU2NoZWR1bGVyfSB0byB1c2UgZm9yIHNjaGVkdWxpbmdcbiAqIHRoZSBlbWlzc2lvbnMgb2YgdGhlIGBuZXh0YCBub3RpZmljYXRpb25zLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSBpdGVtcyBpbiB0aGUgc3BlY2lmaWVkIEl0ZXJhYmxlIGFuZCB0aGVuIGVtaXRzIHRoZSBpdGVtc1xuICogZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUuXG4gKiBAbWV0aG9kIHN0YXJ0V2l0aFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0V2l0aDxUPih0aGlzOiBPYnNlcnZhYmxlPFQ+LCAuLi5hcnJheTogQXJyYXk8VCB8IElTY2hlZHVsZXI+KTogT2JzZXJ2YWJsZTxUPiB7XG4gIGxldCBzY2hlZHVsZXIgPSA8SVNjaGVkdWxlcj5hcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgaWYgKGlzU2NoZWR1bGVyKHNjaGVkdWxlcikpIHtcbiAgICBhcnJheS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzY2hlZHVsZXIgPSBudWxsO1xuICB9XG5cbiAgY29uc3QgbGVuID0gYXJyYXkubGVuZ3RoO1xuICBpZiAobGVuID09PSAxKSB7XG4gICAgcmV0dXJuIGNvbmNhdFN0YXRpYyhuZXcgU2NhbGFyT2JzZXJ2YWJsZTxUPig8VD5hcnJheVswXSwgc2NoZWR1bGVyKSwgPE9ic2VydmFibGU8VD4+dGhpcyk7XG4gIH0gZWxzZSBpZiAobGVuID4gMSkge1xuICAgIHJldHVybiBjb25jYXRTdGF0aWMobmV3IEFycmF5T2JzZXJ2YWJsZTxUPig8VFtdPmFycmF5LCBzY2hlZHVsZXIpLCA8T2JzZXJ2YWJsZTxUPj50aGlzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29uY2F0U3RhdGljKG5ldyBFbXB0eU9ic2VydmFibGU8VD4oc2NoZWR1bGVyKSwgPE9ic2VydmFibGU8VD4+dGhpcyk7XG4gIH1cbn1cbiJdfQ==