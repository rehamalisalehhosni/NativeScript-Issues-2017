"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var main_view_model_1 = require("./main-view-model");
var label_1 = require("ui/label");
var application_1 = require("application");
var source = new main_view_model_1.HelloWorldModel();
function loaded(args) {
    var page = args.object;
    var dateConverter = {
        toView: function (value, format) {
            var result = format;
            var day = value.getDate();
            result = result.replace("DD", day < 10 ? "0" + day : day);
            var month = value.getMonth() + 1;
            result = result.replace("MM", month < 10 ? "0" + month : month);
            result = result.replace("YYYY", value.getFullYear());
            return result;
        },
        toModel: function (value, format) {
            var ddIndex = format.indexOf("DD");
            var day = parseInt(value.substr(ddIndex, 2));
            var mmIndex = format.indexOf("MM");
            var month = parseInt(value.substr(mmIndex, 2));
            var yyyyIndex = format.indexOf("YYYY");
            var year = parseInt(value.substr(yyyyIndex, 4));
            var result = new Date(year, month - 1, day);
            return result;
        }
    };
    var labelControl = new label_1.Label();
    labelControl.bind({
        sourceProperty: 'testDate',
        targetProperty: 'text',
        twoWay: false,
        expression: "testDate | dateConverter('DD.MM.YYYY')"
    });
    source.set("dateConverter", dateConverter);
    source.set("testDate", new Date());
    var appResurces = application_1.getResources();
    appResurces['dateConverter'] = dateConverter;
    appResurces['dateFormat'] = "DD.MM.YYYY";
    console.dir(appResurces);
    page.bindingContext = source;
    page.content = labelControl;
}
exports.loaded = loaded;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEscURBQW9EO0FBQ3BELGtDQUFpQztBQUVqQywyQ0FBeUQ7QUFFekQsSUFBSSxNQUFNLEdBQUcsSUFBSSxpQ0FBZSxFQUFFLENBQUM7QUFFbkMsZ0JBQXVCLElBQWU7SUFDbEMsSUFBSSxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUU3QixJQUFJLGFBQWEsR0FBRztRQUNoQixNQUFNLEVBQUUsVUFBQyxLQUFLLEVBQUUsTUFBTTtZQUNsQixJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFDcEIsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzFCLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDMUQsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNqQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQ2hFLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztZQUNyRCxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2xCLENBQUM7UUFDRCxPQUFPLEVBQUUsVUFBQyxLQUFLLEVBQUUsTUFBTTtZQUNuQixJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25DLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdDLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkMsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN2QyxJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoRCxJQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUM1QyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2xCLENBQUM7S0FDSixDQUFBO0lBRUQsSUFBSSxZQUFZLEdBQUcsSUFBSSxhQUFLLEVBQUUsQ0FBQztJQUUvQixZQUFZLENBQUMsSUFBSSxDQUFDO1FBQ2QsY0FBYyxFQUFFLFVBQVU7UUFDMUIsY0FBYyxFQUFFLE1BQU07UUFDdEIsTUFBTSxFQUFFLEtBQUs7UUFDYixVQUFVLEVBQUUsd0NBQXdDO0tBQ3ZELENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzNDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztJQUVuQyxJQUFJLFdBQVcsR0FBRywwQkFBWSxFQUFFLENBQUM7SUFDakMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxHQUFHLGFBQWEsQ0FBQztJQUM3QyxXQUFXLENBQUMsWUFBWSxDQUFDLEdBQUcsWUFBWSxDQUFDO0lBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFekIsSUFBSSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUM7SUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUM7QUFDaEMsQ0FBQztBQTVDRCx3QkE0Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudERhdGEgfSBmcm9tICdkYXRhL29ic2VydmFibGUnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJ3VpL3BhZ2UnO1xuaW1wb3J0IHsgSGVsbG9Xb3JsZE1vZGVsIH0gZnJvbSAnLi9tYWluLXZpZXctbW9kZWwnO1xuaW1wb3J0IHsgTGFiZWwgfSBmcm9tIFwidWkvbGFiZWxcIjtcblxuaW1wb3J0IHsgc2V0UmVzb3VyY2VzLCBnZXRSZXNvdXJjZXMgfSBmcm9tIFwiYXBwbGljYXRpb25cIjtcblxubGV0IHNvdXJjZSA9IG5ldyBIZWxsb1dvcmxkTW9kZWwoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRlZChhcmdzOiBFdmVudERhdGEpIHtcbiAgICBsZXQgcGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0O1xuXG4gICAgdmFyIGRhdGVDb252ZXJ0ZXIgPSB7XG4gICAgICAgIHRvVmlldzogKHZhbHVlLCBmb3JtYXQpID0+IHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBmb3JtYXQ7XG4gICAgICAgICAgICB2YXIgZGF5ID0gdmFsdWUuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoXCJERFwiLCBkYXkgPCAxMCA/IFwiMFwiICsgZGF5IDogZGF5KTtcbiAgICAgICAgICAgIHZhciBtb250aCA9IHZhbHVlLmdldE1vbnRoKCkgKyAxO1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoXCJNTVwiLCBtb250aCA8IDEwID8gXCIwXCIgKyBtb250aCA6IG1vbnRoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKFwiWVlZWVwiLCB2YWx1ZS5nZXRGdWxsWWVhcigpKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG4gICAgICAgIHRvTW9kZWw6ICh2YWx1ZSwgZm9ybWF0KSA9PiB7XG4gICAgICAgICAgICB2YXIgZGRJbmRleCA9IGZvcm1hdC5pbmRleE9mKFwiRERcIik7XG4gICAgICAgICAgICB2YXIgZGF5ID0gcGFyc2VJbnQodmFsdWUuc3Vic3RyKGRkSW5kZXgsIDIpKTtcbiAgICAgICAgICAgIHZhciBtbUluZGV4ID0gZm9ybWF0LmluZGV4T2YoXCJNTVwiKTtcbiAgICAgICAgICAgIHZhciBtb250aCA9IHBhcnNlSW50KHZhbHVlLnN1YnN0cihtbUluZGV4LCAyKSk7XG4gICAgICAgICAgICB2YXIgeXl5eUluZGV4ID0gZm9ybWF0LmluZGV4T2YoXCJZWVlZXCIpO1xuICAgICAgICAgICAgdmFyIHllYXIgPSBwYXJzZUludCh2YWx1ZS5zdWJzdHIoeXl5eUluZGV4LCA0KSk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBkYXkpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsYWJlbENvbnRyb2wgPSBuZXcgTGFiZWwoKTtcblxuICAgIGxhYmVsQ29udHJvbC5iaW5kKHtcbiAgICAgICAgc291cmNlUHJvcGVydHk6ICd0ZXN0RGF0ZScsXG4gICAgICAgIHRhcmdldFByb3BlcnR5OiAndGV4dCcsXG4gICAgICAgIHR3b1dheTogZmFsc2UsXG4gICAgICAgIGV4cHJlc3Npb246IFwidGVzdERhdGUgfCBkYXRlQ29udmVydGVyKCdERC5NTS5ZWVlZJylcIlxuICAgIH0pO1xuXG4gICAgc291cmNlLnNldChcImRhdGVDb252ZXJ0ZXJcIiwgZGF0ZUNvbnZlcnRlcik7XG4gICAgc291cmNlLnNldChcInRlc3REYXRlXCIsIG5ldyBEYXRlKCkpO1xuXG4gICAgdmFyIGFwcFJlc3VyY2VzID0gZ2V0UmVzb3VyY2VzKCk7XG4gICAgYXBwUmVzdXJjZXNbJ2RhdGVDb252ZXJ0ZXInXSA9IGRhdGVDb252ZXJ0ZXI7XG4gICAgYXBwUmVzdXJjZXNbJ2RhdGVGb3JtYXQnXSA9IFwiREQuTU0uWVlZWVwiO1xuICAgIGNvbnNvbGUuZGlyKGFwcFJlc3VyY2VzKTtcblxuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSBzb3VyY2U7XG4gICAgcGFnZS5jb250ZW50ID0gbGFiZWxDb250cm9sO1xufSJdfQ==