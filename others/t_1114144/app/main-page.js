"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var viewModel = require("./main-view-model");
var frameModule = require("tns-core-modules/ui/frame");
function onPageLoaded(args) {
    var page = args.object;
    page.bindingContext = new viewModel.ViewModel();
}
exports.onPageLoaded = onPageLoaded;
function onItemSwiping(args) {
}
exports.onItemSwiping = onItemSwiping;
function onSwipeCellProgressChanged(args) {
    var swipeLimits = args.data.swipeLimits;
    var currentItemView = args.object;
    if (args.data.x > 200) {
        console.log("Notify perform left action");
    }
    else if (args.data.x < -200) {
        console.log("Notify perform right action");
        // we could delete the item when the user swipes over the rule above (n else if)
        // var listView = <listViewModule.RadListView>frameModule.topmost().currentPage.getViewById("listView");
        // var viewModel: viewModel.ViewModel = <viewModel.ViewModel>listView.bindingContext;
        // viewModel.dataItems.splice(args.index, 1);
    }
}
exports.onSwipeCellProgressChanged = onSwipeCellProgressChanged;
// << listview-swipe-action-release-notify
// >> listview-swipe-action-release-limits
function onSwipeCellStarted(args) {
    var swipeLimits = args.data.swipeLimits;
    var swipeView = args.object;
    var leftItem = swipeView.getViewById('mark-view');
    var rightItem = swipeView.getViewById('delete-view');
    swipeLimits.left = leftItem.getMeasuredWidth();
    swipeLimits.right = rightItem.getMeasuredWidth();
    swipeLimits.threshold = leftItem.getMeasuredWidth() / 1.4;
}
exports.onSwipeCellStarted = onSwipeCellStarted;
// << listview-swipe-action-release-limits
// >> listview-swipe-action-release-execute
function onSwipeCellFinished(args) {
    var listView = frameModule.topmost().currentPage.getViewById("listView");
    console.log("onSwipeCellFinished");
}
exports.onSwipeCellFinished = onSwipeCellFinished;
function onLeftSwipeClick(args) {
    var listView = frameModule.topmost().currentPage.getViewById("listView");
    console.log("Left swipe click");
    listView.notifySwipeToExecuteFinished();
}
exports.onLeftSwipeClick = onLeftSwipeClick;
function onRightSwipeClick(args) {
    var listView = frameModule.topmost().currentPage.getViewById("listView");
    console.log("Right swipe click");
    var viewModel = listView.bindingContext;
    viewModel.dataItems.splice(viewModel.dataItems.indexOf(args.object.bindingContext), 1);
}
exports.onRightSwipeClick = onRightSwipeClick;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsNkNBQWdEO0FBR2hELHVEQUEwRDtBQUcxRCxzQkFBNkIsSUFBSTtJQUM3QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRXZCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDcEQsQ0FBQztBQUpELG9DQUlDO0FBRUQsdUJBQThCLElBQTBDO0FBQ3hFLENBQUM7QUFERCxzQ0FDQztBQUVELG9DQUEyQyxJQUEwQztJQUNqRixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUN4QyxJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBR2xDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUUzQyxnRkFBZ0Y7UUFFaEYsd0dBQXdHO1FBQ3hHLHFGQUFxRjtRQUNyRiw2Q0FBNkM7SUFDakQsQ0FBQztBQUNMLENBQUM7QUFoQkQsZ0VBZ0JDO0FBQ0QsMENBQTBDO0FBRTFDLDBDQUEwQztBQUMxQyw0QkFBbUMsSUFBMEM7SUFDekUsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDeEMsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUM1QixJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFrQixXQUFXLENBQUMsQ0FBQztJQUNuRSxJQUFJLFNBQVMsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFrQixhQUFhLENBQUMsQ0FBQztJQUN0RSxXQUFXLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQy9DLFdBQVcsQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDakQsV0FBVyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxHQUFHLENBQUM7QUFFOUQsQ0FBQztBQVRELGdEQVNDO0FBQ0QsMENBQTBDO0FBRTFDLDJDQUEyQztBQUMzQyw2QkFBb0MsSUFBMEM7SUFDMUUsSUFBSSxRQUFRLEdBQStCLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JHLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUV2QyxDQUFDO0FBSkQsa0RBSUM7QUFFRCwwQkFBaUMsSUFBc0M7SUFDbkUsSUFBSSxRQUFRLEdBQStCLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JHLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNoQyxRQUFRLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztBQUM1QyxDQUFDO0FBSkQsNENBSUM7QUFFRCwyQkFBa0MsSUFBSTtJQUNsQyxJQUFJLFFBQVEsR0FBK0IsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDckcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2pDLElBQUksU0FBUyxHQUE2QyxRQUFRLENBQUMsY0FBYyxDQUFDO0lBQ2xGLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDM0YsQ0FBQztBQUxELDhDQUtDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgdmlld01vZGVsID0gcmVxdWlyZShcIi4vbWFpbi12aWV3LW1vZGVsXCIpO1xuaW1wb3J0IGxpc3RWaWV3TW9kdWxlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC10ZWxlcmlrLXVpLXByby9saXN0dmlld1wiKTtcbmltcG9ydCB2aWV3TW9kdWxlID0gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9jb3JlL3ZpZXcnKTtcbmltcG9ydCBmcmFtZU1vZHVsZSA9IHJlcXVpcmUoXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2ZyYW1lXCIpO1xuaW1wb3J0IHV0aWxzTW9kdWxlID0gcmVxdWlyZShcInRucy1jb3JlLW1vZHVsZXMvdXRpbHMvdXRpbHNcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiBvblBhZ2VMb2FkZWQoYXJncykge1xuICAgIHZhciBwYWdlID0gYXJncy5vYmplY3Q7XG5cbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gbmV3IHZpZXdNb2RlbC5WaWV3TW9kZWwoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uSXRlbVN3aXBpbmcoYXJnczogbGlzdFZpZXdNb2R1bGUuU3dpcGVBY3Rpb25zRXZlbnREYXRhKSB7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvblN3aXBlQ2VsbFByb2dyZXNzQ2hhbmdlZChhcmdzOiBsaXN0Vmlld01vZHVsZS5Td2lwZUFjdGlvbnNFdmVudERhdGEpIHtcbiAgICB2YXIgc3dpcGVMaW1pdHMgPSBhcmdzLmRhdGEuc3dpcGVMaW1pdHM7XG4gICAgdmFyIGN1cnJlbnRJdGVtVmlldyA9IGFyZ3Mub2JqZWN0O1xuXG5cbiAgICBpZiAoYXJncy5kYXRhLnggPiAyMDApIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJOb3RpZnkgcGVyZm9ybSBsZWZ0IGFjdGlvblwiKTtcbiAgICB9IGVsc2UgaWYgKGFyZ3MuZGF0YS54IDwgLTIwMCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIk5vdGlmeSBwZXJmb3JtIHJpZ2h0IGFjdGlvblwiKTtcblxuICAgICAgICAvLyB3ZSBjb3VsZCBkZWxldGUgdGhlIGl0ZW0gd2hlbiB0aGUgdXNlciBzd2lwZXMgb3ZlciB0aGUgcnVsZSBhYm92ZSAobiBlbHNlIGlmKVxuICAgICAgICBcbiAgICAgICAgLy8gdmFyIGxpc3RWaWV3ID0gPGxpc3RWaWV3TW9kdWxlLlJhZExpc3RWaWV3PmZyYW1lTW9kdWxlLnRvcG1vc3QoKS5jdXJyZW50UGFnZS5nZXRWaWV3QnlJZChcImxpc3RWaWV3XCIpO1xuICAgICAgICAvLyB2YXIgdmlld01vZGVsOiB2aWV3TW9kZWwuVmlld01vZGVsID0gPHZpZXdNb2RlbC5WaWV3TW9kZWw+bGlzdFZpZXcuYmluZGluZ0NvbnRleHQ7XG4gICAgICAgIC8vIHZpZXdNb2RlbC5kYXRhSXRlbXMuc3BsaWNlKGFyZ3MuaW5kZXgsIDEpO1xuICAgIH1cbn1cbi8vIDw8IGxpc3R2aWV3LXN3aXBlLWFjdGlvbi1yZWxlYXNlLW5vdGlmeVxuXG4vLyA+PiBsaXN0dmlldy1zd2lwZS1hY3Rpb24tcmVsZWFzZS1saW1pdHNcbmV4cG9ydCBmdW5jdGlvbiBvblN3aXBlQ2VsbFN0YXJ0ZWQoYXJnczogbGlzdFZpZXdNb2R1bGUuU3dpcGVBY3Rpb25zRXZlbnREYXRhKSB7XG4gICAgdmFyIHN3aXBlTGltaXRzID0gYXJncy5kYXRhLnN3aXBlTGltaXRzO1xuICAgIHZhciBzd2lwZVZpZXcgPSBhcmdzLm9iamVjdDtcbiAgICB2YXIgbGVmdEl0ZW0gPSBzd2lwZVZpZXcuZ2V0Vmlld0J5SWQ8dmlld01vZHVsZS5WaWV3PignbWFyay12aWV3Jyk7XG4gICAgdmFyIHJpZ2h0SXRlbSA9IHN3aXBlVmlldy5nZXRWaWV3QnlJZDx2aWV3TW9kdWxlLlZpZXc+KCdkZWxldGUtdmlldycpO1xuICAgIHN3aXBlTGltaXRzLmxlZnQgPSBsZWZ0SXRlbS5nZXRNZWFzdXJlZFdpZHRoKCk7XG4gICAgc3dpcGVMaW1pdHMucmlnaHQgPSByaWdodEl0ZW0uZ2V0TWVhc3VyZWRXaWR0aCgpO1xuICAgIHN3aXBlTGltaXRzLnRocmVzaG9sZCA9IGxlZnRJdGVtLmdldE1lYXN1cmVkV2lkdGgoKSAvIDEuNDtcblxufVxuLy8gPDwgbGlzdHZpZXctc3dpcGUtYWN0aW9uLXJlbGVhc2UtbGltaXRzXG5cbi8vID4+IGxpc3R2aWV3LXN3aXBlLWFjdGlvbi1yZWxlYXNlLWV4ZWN1dGVcbmV4cG9ydCBmdW5jdGlvbiBvblN3aXBlQ2VsbEZpbmlzaGVkKGFyZ3M6IGxpc3RWaWV3TW9kdWxlLlN3aXBlQWN0aW9uc0V2ZW50RGF0YSkge1xuICAgIHZhciBsaXN0VmlldyA9IDxsaXN0Vmlld01vZHVsZS5SYWRMaXN0Vmlldz5mcmFtZU1vZHVsZS50b3Btb3N0KCkuY3VycmVudFBhZ2UuZ2V0Vmlld0J5SWQoXCJsaXN0Vmlld1wiKTtcbiAgICBjb25zb2xlLmxvZyhcIm9uU3dpcGVDZWxsRmluaXNoZWRcIik7XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uTGVmdFN3aXBlQ2xpY2soYXJnczogbGlzdFZpZXdNb2R1bGUuTGlzdFZpZXdFdmVudERhdGEpIHtcbiAgICB2YXIgbGlzdFZpZXcgPSA8bGlzdFZpZXdNb2R1bGUuUmFkTGlzdFZpZXc+ZnJhbWVNb2R1bGUudG9wbW9zdCgpLmN1cnJlbnRQYWdlLmdldFZpZXdCeUlkKFwibGlzdFZpZXdcIik7XG4gICAgY29uc29sZS5sb2coXCJMZWZ0IHN3aXBlIGNsaWNrXCIpO1xuICAgIGxpc3RWaWV3Lm5vdGlmeVN3aXBlVG9FeGVjdXRlRmluaXNoZWQoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uUmlnaHRTd2lwZUNsaWNrKGFyZ3MpIHtcbiAgICB2YXIgbGlzdFZpZXcgPSA8bGlzdFZpZXdNb2R1bGUuUmFkTGlzdFZpZXc+ZnJhbWVNb2R1bGUudG9wbW9zdCgpLmN1cnJlbnRQYWdlLmdldFZpZXdCeUlkKFwibGlzdFZpZXdcIik7XG4gICAgY29uc29sZS5sb2coXCJSaWdodCBzd2lwZSBjbGlja1wiKTtcbiAgICB2YXIgdmlld01vZGVsOiB2aWV3TW9kZWwuVmlld01vZGVsID0gPHZpZXdNb2RlbC5WaWV3TW9kZWw+bGlzdFZpZXcuYmluZGluZ0NvbnRleHQ7XG4gICAgdmlld01vZGVsLmRhdGFJdGVtcy5zcGxpY2Uodmlld01vZGVsLmRhdGFJdGVtcy5pbmRleE9mKGFyZ3Mub2JqZWN0LmJpbmRpbmdDb250ZXh0KSwgMSk7XG59XG4iXX0=