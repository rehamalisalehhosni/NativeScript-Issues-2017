"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var viewModel = require("./main-view-model");
var frameModule = require("tns-core-modules/ui/frame");
function onPageLoaded(args) {
    var page = args.object;
    page.bindingContext = new viewModel.ViewModel();
}
exports.onPageLoaded = onPageLoaded;
function onItemSwiping(args) {
}
exports.onItemSwiping = onItemSwiping;
function onSwipeCellProgressChanged(args) {
    var swipeLimits = args.data.swipeLimits;
    var currentItemView = args.object;
    console.log("args.swipeView: " + args.swipeView);
    var swipeView = args.swipeView;
    var lbl = args.swipeView.getViewById("lbl");
    console.log("onSwipeCellProgressChanged lbl: " + lbl);
    if (args.data.x > 200) {
        console.log("Notify perform left action");
    }
    else if (args.data.x < -200) {
        console.log("Notify perform right action");
        // we could delete the item when the user swipes over the rule above (n else if)
        // var listView = <listViewModule.RadListView>frameModule.topmost().currentPage.getViewById("listView");
        // var viewModel: viewModel.ViewModel = <viewModel.ViewModel>listView.bindingContext;
        // viewModel.dataItems.splice(args.index, 1);
    }
}
exports.onSwipeCellProgressChanged = onSwipeCellProgressChanged;
// << listview-swipe-action-release-notify
// >> listview-swipe-action-release-limits
function onSwipeCellStarted(args) {
    var swipeLimits = args.data.swipeLimits;
    var swipeView = args.object;
    var leftItem = swipeView.getViewById('mark-view');
    var rightItem = swipeView.getViewById('delete-view');
    swipeLimits.left = leftItem.getMeasuredWidth();
    swipeLimits.right = rightItem.getMeasuredWidth();
    swipeLimits.threshold = leftItem.getMeasuredWidth() / 1.4;
}
exports.onSwipeCellStarted = onSwipeCellStarted;
// << listview-swipe-action-release-limits
// >> listview-swipe-action-release-execute
function onSwipeCellFinished(args) {
    var listView = frameModule.topmost().currentPage.getViewById("listView");
    console.log("onSwipeCellFinished");
}
exports.onSwipeCellFinished = onSwipeCellFinished;
function onLeftSwipeClick(args) {
    var listView = frameModule.topmost().currentPage.getViewById("listView");
    console.log("Left swipe click");
    listView.notifySwipeToExecuteFinished();
}
exports.onLeftSwipeClick = onLeftSwipeClick;
function onRightSwipeClick(args) {
    var listView = frameModule.topmost().currentPage.getViewById("listView");
    console.log("Right swipe click");
    var viewModel = listView.bindingContext;
    viewModel.dataItems.splice(viewModel.dataItems.indexOf(args.object.bindingContext), 1);
}
exports.onRightSwipeClick = onRightSwipeClick;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsNkNBQWdEO0FBR2hELHVEQUEwRDtBQUsxRCxzQkFBNkIsSUFBSTtJQUM3QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRXZCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDcEQsQ0FBQztBQUpELG9DQUlDO0FBRUQsdUJBQThCLElBQTBDO0FBQ3hFLENBQUM7QUFERCxzQ0FDQztBQUVELG9DQUEyQyxJQUEwQztJQUNqRixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUN4QyxJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRWxDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2pELElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7SUFFL0IsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFVLENBQUM7SUFDckQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUV0RCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFFM0MsZ0ZBQWdGO1FBRWhGLHdHQUF3RztRQUN4RyxxRkFBcUY7UUFDckYsNkNBQTZDO0lBQ2pELENBQUM7QUFDTCxDQUFDO0FBckJELGdFQXFCQztBQUNELDBDQUEwQztBQUUxQywwQ0FBMEM7QUFDMUMsNEJBQW1DLElBQTBDO0lBQ3pFLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQ3hDLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDNUIsSUFBSSxRQUFRLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBa0IsV0FBVyxDQUFDLENBQUM7SUFDbkUsSUFBSSxTQUFTLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBa0IsYUFBYSxDQUFDLENBQUM7SUFDdEUsV0FBVyxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMvQyxXQUFXLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ2pELFdBQVcsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsR0FBRyxDQUFDO0FBRTlELENBQUM7QUFURCxnREFTQztBQUNELDBDQUEwQztBQUUxQywyQ0FBMkM7QUFDM0MsNkJBQW9DLElBQTBDO0lBQzFFLElBQUksUUFBUSxHQUErQixXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyRyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFFdkMsQ0FBQztBQUpELGtEQUlDO0FBRUQsMEJBQWlDLElBQXNDO0lBQ25FLElBQUksUUFBUSxHQUErQixXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyRyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDaEMsUUFBUSxDQUFDLDRCQUE0QixFQUFFLENBQUM7QUFDNUMsQ0FBQztBQUpELDRDQUlDO0FBRUQsMkJBQWtDLElBQUk7SUFDbEMsSUFBSSxRQUFRLEdBQStCLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JHLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNqQyxJQUFJLFNBQVMsR0FBNkMsUUFBUSxDQUFDLGNBQWMsQ0FBQztJQUNsRixTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNGLENBQUM7QUFMRCw4Q0FLQyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgdmlld01vZGVsID0gcmVxdWlyZShcIi4vbWFpbi12aWV3LW1vZGVsXCIpO1xyXG5pbXBvcnQgbGlzdFZpZXdNb2R1bGUgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXRlbGVyaWstdWktcHJvL2xpc3R2aWV3XCIpO1xyXG5pbXBvcnQgdmlld01vZHVsZSA9IHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvY29yZS92aWV3Jyk7XHJcbmltcG9ydCBmcmFtZU1vZHVsZSA9IHJlcXVpcmUoXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2ZyYW1lXCIpO1xyXG5pbXBvcnQgdXRpbHNNb2R1bGUgPSByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy91dGlscy91dGlsc1wiKTtcclxuXHJcbmltcG9ydCB7IExhYmVsIH0gZnJvbSBcInVpL2xhYmVsXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25QYWdlTG9hZGVkKGFyZ3MpIHtcclxuICAgIHZhciBwYWdlID0gYXJncy5vYmplY3Q7XHJcblxyXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IG5ldyB2aWV3TW9kZWwuVmlld01vZGVsKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvbkl0ZW1Td2lwaW5nKGFyZ3M6IGxpc3RWaWV3TW9kdWxlLlN3aXBlQWN0aW9uc0V2ZW50RGF0YSkge1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25Td2lwZUNlbGxQcm9ncmVzc0NoYW5nZWQoYXJnczogbGlzdFZpZXdNb2R1bGUuU3dpcGVBY3Rpb25zRXZlbnREYXRhKSB7XHJcbiAgICB2YXIgc3dpcGVMaW1pdHMgPSBhcmdzLmRhdGEuc3dpcGVMaW1pdHM7XHJcbiAgICB2YXIgY3VycmVudEl0ZW1WaWV3ID0gYXJncy5vYmplY3Q7XHJcblxyXG4gICAgY29uc29sZS5sb2coXCJhcmdzLnN3aXBlVmlldzogXCIgKyBhcmdzLnN3aXBlVmlldyk7XHJcbiAgICB2YXIgc3dpcGVWaWV3ID0gYXJncy5zd2lwZVZpZXc7XHJcblxyXG4gICAgdmFyIGxibCA9IGFyZ3Muc3dpcGVWaWV3LmdldFZpZXdCeUlkKFwibGJsXCIpIGFzIExhYmVsO1xyXG4gICAgY29uc29sZS5sb2coXCJvblN3aXBlQ2VsbFByb2dyZXNzQ2hhbmdlZCBsYmw6IFwiICsgbGJsKTtcclxuXHJcbiAgICBpZiAoYXJncy5kYXRhLnggPiAyMDApIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIk5vdGlmeSBwZXJmb3JtIGxlZnQgYWN0aW9uXCIpO1xyXG4gICAgfSBlbHNlIGlmIChhcmdzLmRhdGEueCA8IC0yMDApIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIk5vdGlmeSBwZXJmb3JtIHJpZ2h0IGFjdGlvblwiKTtcclxuXHJcbiAgICAgICAgLy8gd2UgY291bGQgZGVsZXRlIHRoZSBpdGVtIHdoZW4gdGhlIHVzZXIgc3dpcGVzIG92ZXIgdGhlIHJ1bGUgYWJvdmUgKG4gZWxzZSBpZilcclxuXHJcbiAgICAgICAgLy8gdmFyIGxpc3RWaWV3ID0gPGxpc3RWaWV3TW9kdWxlLlJhZExpc3RWaWV3PmZyYW1lTW9kdWxlLnRvcG1vc3QoKS5jdXJyZW50UGFnZS5nZXRWaWV3QnlJZChcImxpc3RWaWV3XCIpO1xyXG4gICAgICAgIC8vIHZhciB2aWV3TW9kZWw6IHZpZXdNb2RlbC5WaWV3TW9kZWwgPSA8dmlld01vZGVsLlZpZXdNb2RlbD5saXN0Vmlldy5iaW5kaW5nQ29udGV4dDtcclxuICAgICAgICAvLyB2aWV3TW9kZWwuZGF0YUl0ZW1zLnNwbGljZShhcmdzLmluZGV4LCAxKTtcclxuICAgIH1cclxufVxyXG4vLyA8PCBsaXN0dmlldy1zd2lwZS1hY3Rpb24tcmVsZWFzZS1ub3RpZnlcclxuXHJcbi8vID4+IGxpc3R2aWV3LXN3aXBlLWFjdGlvbi1yZWxlYXNlLWxpbWl0c1xyXG5leHBvcnQgZnVuY3Rpb24gb25Td2lwZUNlbGxTdGFydGVkKGFyZ3M6IGxpc3RWaWV3TW9kdWxlLlN3aXBlQWN0aW9uc0V2ZW50RGF0YSkge1xyXG4gICAgdmFyIHN3aXBlTGltaXRzID0gYXJncy5kYXRhLnN3aXBlTGltaXRzO1xyXG4gICAgdmFyIHN3aXBlVmlldyA9IGFyZ3Mub2JqZWN0O1xyXG4gICAgdmFyIGxlZnRJdGVtID0gc3dpcGVWaWV3LmdldFZpZXdCeUlkPHZpZXdNb2R1bGUuVmlldz4oJ21hcmstdmlldycpO1xyXG4gICAgdmFyIHJpZ2h0SXRlbSA9IHN3aXBlVmlldy5nZXRWaWV3QnlJZDx2aWV3TW9kdWxlLlZpZXc+KCdkZWxldGUtdmlldycpO1xyXG4gICAgc3dpcGVMaW1pdHMubGVmdCA9IGxlZnRJdGVtLmdldE1lYXN1cmVkV2lkdGgoKTtcclxuICAgIHN3aXBlTGltaXRzLnJpZ2h0ID0gcmlnaHRJdGVtLmdldE1lYXN1cmVkV2lkdGgoKTtcclxuICAgIHN3aXBlTGltaXRzLnRocmVzaG9sZCA9IGxlZnRJdGVtLmdldE1lYXN1cmVkV2lkdGgoKSAvIDEuNDtcclxuXHJcbn1cclxuLy8gPDwgbGlzdHZpZXctc3dpcGUtYWN0aW9uLXJlbGVhc2UtbGltaXRzXHJcblxyXG4vLyA+PiBsaXN0dmlldy1zd2lwZS1hY3Rpb24tcmVsZWFzZS1leGVjdXRlXHJcbmV4cG9ydCBmdW5jdGlvbiBvblN3aXBlQ2VsbEZpbmlzaGVkKGFyZ3M6IGxpc3RWaWV3TW9kdWxlLlN3aXBlQWN0aW9uc0V2ZW50RGF0YSkge1xyXG4gICAgdmFyIGxpc3RWaWV3ID0gPGxpc3RWaWV3TW9kdWxlLlJhZExpc3RWaWV3PmZyYW1lTW9kdWxlLnRvcG1vc3QoKS5jdXJyZW50UGFnZS5nZXRWaWV3QnlJZChcImxpc3RWaWV3XCIpO1xyXG4gICAgY29uc29sZS5sb2coXCJvblN3aXBlQ2VsbEZpbmlzaGVkXCIpO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uTGVmdFN3aXBlQ2xpY2soYXJnczogbGlzdFZpZXdNb2R1bGUuTGlzdFZpZXdFdmVudERhdGEpIHtcclxuICAgIHZhciBsaXN0VmlldyA9IDxsaXN0Vmlld01vZHVsZS5SYWRMaXN0Vmlldz5mcmFtZU1vZHVsZS50b3Btb3N0KCkuY3VycmVudFBhZ2UuZ2V0Vmlld0J5SWQoXCJsaXN0Vmlld1wiKTtcclxuICAgIGNvbnNvbGUubG9nKFwiTGVmdCBzd2lwZSBjbGlja1wiKTtcclxuICAgIGxpc3RWaWV3Lm5vdGlmeVN3aXBlVG9FeGVjdXRlRmluaXNoZWQoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uUmlnaHRTd2lwZUNsaWNrKGFyZ3MpIHtcclxuICAgIHZhciBsaXN0VmlldyA9IDxsaXN0Vmlld01vZHVsZS5SYWRMaXN0Vmlldz5mcmFtZU1vZHVsZS50b3Btb3N0KCkuY3VycmVudFBhZ2UuZ2V0Vmlld0J5SWQoXCJsaXN0Vmlld1wiKTtcclxuICAgIGNvbnNvbGUubG9nKFwiUmlnaHQgc3dpcGUgY2xpY2tcIik7XHJcbiAgICB2YXIgdmlld01vZGVsOiB2aWV3TW9kZWwuVmlld01vZGVsID0gPHZpZXdNb2RlbC5WaWV3TW9kZWw+bGlzdFZpZXcuYmluZGluZ0NvbnRleHQ7XHJcbiAgICB2aWV3TW9kZWwuZGF0YUl0ZW1zLnNwbGljZSh2aWV3TW9kZWwuZGF0YUl0ZW1zLmluZGV4T2YoYXJncy5vYmplY3QuYmluZGluZ0NvbnRleHQpLCAxKTtcclxufVxyXG4iXX0=