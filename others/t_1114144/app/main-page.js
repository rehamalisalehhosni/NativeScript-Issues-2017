"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var viewModel = require("./main-view-model");
var frameModule = require("tns-core-modules/ui/frame");
function onPageLoaded(args) {
    var page = args.object;
    page.bindingContext = new viewModel.ViewModel();
}
exports.onPageLoaded = onPageLoaded;
function onItemSwiping(args) {
}
exports.onItemSwiping = onItemSwiping;
function onSwipeCellProgressChanged(args) {
    var swipeLimits = args.data.swipeLimits;
    var currentItemView = args.object;
    if (args.data.x > 200) {
        console.log("Notify perform left action");
    }
    else if (args.data.x < -200) {
        console.log("Notify perform right action");
    }
}
exports.onSwipeCellProgressChanged = onSwipeCellProgressChanged;
// << listview-swipe-action-release-notify
// >> listview-swipe-action-release-limits
function onSwipeCellStarted(args) {
    var swipeLimits = args.data.swipeLimits;
    var swipeView = args.object;
    var leftItem = swipeView.getViewById('mark-view');
    var rightItem = swipeView.getViewById('delete-view');
    swipeLimits.left = leftItem.getMeasuredWidth();
    swipeLimits.right = rightItem.getMeasuredWidth();
    swipeLimits.threshold = leftItem.getMeasuredWidth() / 1.4;
}
exports.onSwipeCellStarted = onSwipeCellStarted;
// << listview-swipe-action-release-limits
// >> listview-swipe-action-release-execute
function onSwipeCellFinished(args) {
}
exports.onSwipeCellFinished = onSwipeCellFinished;
function onLeftSwipeClick(args) {
    var listView = frameModule.topmost().currentPage.getViewById("listView");
    console.log("Left swipe click");
    listView.notifySwipeToExecuteFinished();
}
exports.onLeftSwipeClick = onLeftSwipeClick;
function onRightSwipeClick(args) {
    var listView = frameModule.topmost().currentPage.getViewById("listView");
    console.log("Right swipe click");
    var viewModel = listView.bindingContext;
    viewModel.dataItems.splice(viewModel.dataItems.indexOf(args.object.bindingContext), 1);
}
exports.onRightSwipeClick = onRightSwipeClick;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsNkNBQWdEO0FBR2hELHVEQUEwRDtBQUcxRCxzQkFBNkIsSUFBSTtJQUM3QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRXZCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDcEQsQ0FBQztBQUpELG9DQUlDO0FBRUQsdUJBQThCLElBQTBDO0FBQ3hFLENBQUM7QUFERCxzQ0FDQztBQUVELG9DQUEyQyxJQUEwQztJQUNqRixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUN4QyxJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRWxDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLENBQUMsQ0FBQztJQUMvQyxDQUFDO0FBQ0wsQ0FBQztBQVRELGdFQVNDO0FBQ0QsMENBQTBDO0FBRTFDLDBDQUEwQztBQUMxQyw0QkFBbUMsSUFBMEM7SUFDekUsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDeEMsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUM1QixJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFrQixXQUFXLENBQUMsQ0FBQztJQUNuRSxJQUFJLFNBQVMsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFrQixhQUFhLENBQUMsQ0FBQztJQUN0RSxXQUFXLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQy9DLFdBQVcsQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDakQsV0FBVyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxHQUFHLENBQUM7QUFFOUQsQ0FBQztBQVRELGdEQVNDO0FBQ0QsMENBQTBDO0FBRTFDLDJDQUEyQztBQUMzQyw2QkFBb0MsSUFBMEM7QUFDOUUsQ0FBQztBQURELGtEQUNDO0FBRUQsMEJBQWlDLElBQXNDO0lBQ2xFLElBQUksUUFBUSxHQUErQixXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN0RyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDaEMsUUFBUSxDQUFDLDRCQUE0QixFQUFFLENBQUM7QUFDNUMsQ0FBQztBQUpELDRDQUlDO0FBRUQsMkJBQWtDLElBQUk7SUFDakMsSUFBSSxRQUFRLEdBQStCLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3RHLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNqQyxJQUFJLFNBQVMsR0FBNkMsUUFBUSxDQUFDLGNBQWMsQ0FBQztJQUNsRixTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNGLENBQUM7QUFMRCw4Q0FLQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHZpZXdNb2RlbCA9IHJlcXVpcmUoXCIuL21haW4tdmlldy1tb2RlbFwiKTtcbmltcG9ydCBsaXN0Vmlld01vZHVsZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtdGVsZXJpay11aS1wcm8vbGlzdHZpZXdcIik7XG5pbXBvcnQgdmlld01vZHVsZSA9IHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvY29yZS92aWV3Jyk7XG5pbXBvcnQgZnJhbWVNb2R1bGUgPSByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy91aS9mcmFtZVwiKTtcbmltcG9ydCB1dGlsc01vZHVsZSA9IHJlcXVpcmUoXCJ0bnMtY29yZS1tb2R1bGVzL3V0aWxzL3V0aWxzXCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gb25QYWdlTG9hZGVkKGFyZ3MpIHtcbiAgICB2YXIgcGFnZSA9IGFyZ3Mub2JqZWN0O1xuXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IG5ldyB2aWV3TW9kZWwuVmlld01vZGVsKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkl0ZW1Td2lwaW5nKGFyZ3M6IGxpc3RWaWV3TW9kdWxlLlN3aXBlQWN0aW9uc0V2ZW50RGF0YSkge1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25Td2lwZUNlbGxQcm9ncmVzc0NoYW5nZWQoYXJnczogbGlzdFZpZXdNb2R1bGUuU3dpcGVBY3Rpb25zRXZlbnREYXRhKSB7XG4gICAgdmFyIHN3aXBlTGltaXRzID0gYXJncy5kYXRhLnN3aXBlTGltaXRzO1xuICAgIHZhciBjdXJyZW50SXRlbVZpZXcgPSBhcmdzLm9iamVjdDtcblxuICAgIGlmIChhcmdzLmRhdGEueCA+IDIwMCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIk5vdGlmeSBwZXJmb3JtIGxlZnQgYWN0aW9uXCIpO1xuICAgIH0gZWxzZSBpZiAoYXJncy5kYXRhLnggPCAtMjAwKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTm90aWZ5IHBlcmZvcm0gcmlnaHQgYWN0aW9uXCIpO1xuICAgIH1cbn1cbi8vIDw8IGxpc3R2aWV3LXN3aXBlLWFjdGlvbi1yZWxlYXNlLW5vdGlmeVxuXG4vLyA+PiBsaXN0dmlldy1zd2lwZS1hY3Rpb24tcmVsZWFzZS1saW1pdHNcbmV4cG9ydCBmdW5jdGlvbiBvblN3aXBlQ2VsbFN0YXJ0ZWQoYXJnczogbGlzdFZpZXdNb2R1bGUuU3dpcGVBY3Rpb25zRXZlbnREYXRhKSB7XG4gICAgdmFyIHN3aXBlTGltaXRzID0gYXJncy5kYXRhLnN3aXBlTGltaXRzO1xuICAgIHZhciBzd2lwZVZpZXcgPSBhcmdzLm9iamVjdDtcbiAgICB2YXIgbGVmdEl0ZW0gPSBzd2lwZVZpZXcuZ2V0Vmlld0J5SWQ8dmlld01vZHVsZS5WaWV3PignbWFyay12aWV3Jyk7XG4gICAgdmFyIHJpZ2h0SXRlbSA9IHN3aXBlVmlldy5nZXRWaWV3QnlJZDx2aWV3TW9kdWxlLlZpZXc+KCdkZWxldGUtdmlldycpO1xuICAgIHN3aXBlTGltaXRzLmxlZnQgPSBsZWZ0SXRlbS5nZXRNZWFzdXJlZFdpZHRoKCk7XG4gICAgc3dpcGVMaW1pdHMucmlnaHQgPSByaWdodEl0ZW0uZ2V0TWVhc3VyZWRXaWR0aCgpO1xuICAgIHN3aXBlTGltaXRzLnRocmVzaG9sZCA9IGxlZnRJdGVtLmdldE1lYXN1cmVkV2lkdGgoKSAvIDEuNDtcbiAgICBcbn1cbi8vIDw8IGxpc3R2aWV3LXN3aXBlLWFjdGlvbi1yZWxlYXNlLWxpbWl0c1xuXG4vLyA+PiBsaXN0dmlldy1zd2lwZS1hY3Rpb24tcmVsZWFzZS1leGVjdXRlXG5leHBvcnQgZnVuY3Rpb24gb25Td2lwZUNlbGxGaW5pc2hlZChhcmdzOiBsaXN0Vmlld01vZHVsZS5Td2lwZUFjdGlvbnNFdmVudERhdGEpIHtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uTGVmdFN3aXBlQ2xpY2soYXJnczogbGlzdFZpZXdNb2R1bGUuTGlzdFZpZXdFdmVudERhdGEpIHtcbiAgICAgdmFyIGxpc3RWaWV3ID0gPGxpc3RWaWV3TW9kdWxlLlJhZExpc3RWaWV3PmZyYW1lTW9kdWxlLnRvcG1vc3QoKS5jdXJyZW50UGFnZS5nZXRWaWV3QnlJZChcImxpc3RWaWV3XCIpO1xuICAgIGNvbnNvbGUubG9nKFwiTGVmdCBzd2lwZSBjbGlja1wiKTtcbiAgICBsaXN0Vmlldy5ub3RpZnlTd2lwZVRvRXhlY3V0ZUZpbmlzaGVkKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvblJpZ2h0U3dpcGVDbGljayhhcmdzKSB7XG4gICAgIHZhciBsaXN0VmlldyA9IDxsaXN0Vmlld01vZHVsZS5SYWRMaXN0Vmlldz5mcmFtZU1vZHVsZS50b3Btb3N0KCkuY3VycmVudFBhZ2UuZ2V0Vmlld0J5SWQoXCJsaXN0Vmlld1wiKTtcbiAgICBjb25zb2xlLmxvZyhcIlJpZ2h0IHN3aXBlIGNsaWNrXCIpO1xuICAgIHZhciB2aWV3TW9kZWw6IHZpZXdNb2RlbC5WaWV3TW9kZWwgPSA8dmlld01vZGVsLlZpZXdNb2RlbD5saXN0Vmlldy5iaW5kaW5nQ29udGV4dDtcbiAgICB2aWV3TW9kZWwuZGF0YUl0ZW1zLnNwbGljZSh2aWV3TW9kZWwuZGF0YUl0ZW1zLmluZGV4T2YoYXJncy5vYmplY3QuYmluZGluZ0NvbnRleHQpLCAxKTtcbn1cbiJdfQ==