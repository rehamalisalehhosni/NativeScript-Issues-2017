"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var viewModel = require("./main-view-model");
var frameModule = require("tns-core-modules/ui/frame");
function onPageLoaded(args) {
    var page = args.object;
    page.bindingContext = new viewModel.ViewModel();
}
exports.onPageLoaded = onPageLoaded;
function onItemSwiping(args) {
}
exports.onItemSwiping = onItemSwiping;
function onSwipeCellProgressChanged(args) {
    var swipeLimits = args.data.swipeLimits;
    console.log("swipeLimits.left: " + swipeLimits.left);
    console.log("swipeLimits.right: " + swipeLimits.right);
    console.log("args.data.x: " + args.data.x);
    var swipeView = args.object;
    var leftItem = swipeView.getViewById('mark-view');
    var rightItem = swipeView.getViewById('delete-view');
    if (args.data.x > leftItem.getMeasuredWidth() / 1.2) {
        console.log("Notify perform left action");
    }
    else if (args.data.x < -rightItem.getMeasuredWidth() / 1.2) {
        console.log("Notify perform right action");
    }
}
exports.onSwipeCellProgressChanged = onSwipeCellProgressChanged;
function onSwipeCellStarted(args) {
    var swipeLimits = args.data.swipeLimits;
    var swipeView = args.object;
    var leftItem = swipeView.getViewById('mark-view');
    var rightItem = swipeView.getViewById('delete-view');
    swipeLimits.left = leftItem.getMeasuredWidth();
    swipeLimits.right = rightItem.getMeasuredWidth();
    swipeLimits.threshold = leftItem.getMeasuredWidth() / 2;
}
exports.onSwipeCellStarted = onSwipeCellStarted;
function onSwipeCellFinished(args) {
    console.log("onSwipeCellFinished");
    var listView = frameModule.topmost().currentPage.getViewById("listView");
    listView.notifySwipeToExecuteFinished();
}
exports.onSwipeCellFinished = onSwipeCellFinished;
function onLeftSwipeClick(args) {
    var listView = frameModule.topmost().currentPage.getViewById("listView");
    console.log("Left swipe click");
    listView.notifySwipeToExecuteFinished();
}
exports.onLeftSwipeClick = onLeftSwipeClick;
function onRightSwipeClick(args) {
    var listView = frameModule.topmost().currentPage.getViewById("listView");
    console.log("Right swipe click");
    var viewModel = listView.bindingContext;
    viewModel.dataItems.splice(viewModel.dataItems.indexOf(args.object.bindingContext), 1);
}
exports.onRightSwipeClick = onRightSwipeClick;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQWdEO0FBR2hELHVEQUEwRDtBQUcxRCxzQkFBNkIsSUFBSTtJQUM3QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRXZCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDcEQsQ0FBQztBQUpELG9DQUlDO0FBRUQsdUJBQThCLElBQTBDO0FBQ3hFLENBQUM7QUFERCxzQ0FDQztBQUVELG9DQUEyQyxJQUEwQztJQUNqRixJQUFJLFdBQVcsR0FBK0IsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7SUFFcEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFdkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUzQyxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzVCLElBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQWtCLFdBQVcsQ0FBQyxDQUFDO0lBQ25FLElBQUksU0FBUyxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQWtCLGFBQWEsQ0FBQyxDQUFDO0lBQ3RFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsR0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pELE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLENBQUMsQ0FBQztJQUMvQyxDQUFDO0FBQ0wsQ0FBQztBQWhCRCxnRUFnQkM7QUFFRCw0QkFBbUMsSUFBMEM7SUFDekUsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDeEMsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUM1QixJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFrQixXQUFXLENBQUMsQ0FBQztJQUNuRSxJQUFJLFNBQVMsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFrQixhQUFhLENBQUMsQ0FBQztJQUN0RSxXQUFXLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQy9DLFdBQVcsQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDakQsV0FBVyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQVJELGdEQVFDO0FBRUQsNkJBQW9DLElBQTBDO0lBQzFFLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUNuQyxJQUFJLFFBQVEsR0FBK0IsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDckcsUUFBUSxDQUFDLDRCQUE0QixFQUFFLENBQUM7QUFDNUMsQ0FBQztBQUpELGtEQUlDO0FBRUQsMEJBQWlDLElBQXNDO0lBQ25FLElBQUksUUFBUSxHQUErQixXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyRyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDaEMsUUFBUSxDQUFDLDRCQUE0QixFQUFFLENBQUM7QUFDNUMsQ0FBQztBQUpELDRDQUlDO0FBRUQsMkJBQWtDLElBQUk7SUFDbEMsSUFBSSxRQUFRLEdBQStCLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JHLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNqQyxJQUFJLFNBQVMsR0FBNkMsUUFBUSxDQUFDLGNBQWMsQ0FBQztJQUNsRixTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNGLENBQUM7QUFMRCw4Q0FLQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2aWV3TW9kZWwgPSByZXF1aXJlKFwiLi9tYWluLXZpZXctbW9kZWxcIik7XG5pbXBvcnQgbGlzdFZpZXdNb2R1bGUgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXRlbGVyaWstdWktcHJvL2xpc3R2aWV3XCIpO1xuaW1wb3J0IHZpZXdNb2R1bGUgPSByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2NvcmUvdmlldycpO1xuaW1wb3J0IGZyYW1lTW9kdWxlID0gcmVxdWlyZShcInRucy1jb3JlLW1vZHVsZXMvdWkvZnJhbWVcIik7XG5pbXBvcnQgdXRpbHNNb2R1bGUgPSByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy91dGlscy91dGlsc1wiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIG9uUGFnZUxvYWRlZChhcmdzKSB7XG4gICAgdmFyIHBhZ2UgPSBhcmdzLm9iamVjdDtcblxuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSBuZXcgdmlld01vZGVsLlZpZXdNb2RlbCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25JdGVtU3dpcGluZyhhcmdzOiBsaXN0Vmlld01vZHVsZS5Td2lwZUFjdGlvbnNFdmVudERhdGEpIHtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uU3dpcGVDZWxsUHJvZ3Jlc3NDaGFuZ2VkKGFyZ3M6IGxpc3RWaWV3TW9kdWxlLlN3aXBlQWN0aW9uc0V2ZW50RGF0YSkge1xuICAgIHZhciBzd2lwZUxpbWl0cyA9IDxsaXN0Vmlld01vZHVsZS5Td2lwZUxpbWl0cz5hcmdzLmRhdGEuc3dpcGVMaW1pdHM7XG5cbiAgICBjb25zb2xlLmxvZyhcInN3aXBlTGltaXRzLmxlZnQ6IFwiICsgc3dpcGVMaW1pdHMubGVmdCk7XG4gICAgY29uc29sZS5sb2coXCJzd2lwZUxpbWl0cy5yaWdodDogXCIgKyBzd2lwZUxpbWl0cy5yaWdodCk7XG5cbiAgICBjb25zb2xlLmxvZyhcImFyZ3MuZGF0YS54OiBcIiArIGFyZ3MuZGF0YS54KTtcblxuICAgIHZhciBzd2lwZVZpZXcgPSBhcmdzLm9iamVjdDtcbiAgICB2YXIgbGVmdEl0ZW0gPSBzd2lwZVZpZXcuZ2V0Vmlld0J5SWQ8dmlld01vZHVsZS5WaWV3PignbWFyay12aWV3Jyk7XG4gICAgdmFyIHJpZ2h0SXRlbSA9IHN3aXBlVmlldy5nZXRWaWV3QnlJZDx2aWV3TW9kdWxlLlZpZXc+KCdkZWxldGUtdmlldycpO1xuICAgIGlmIChhcmdzLmRhdGEueCA+IGxlZnRJdGVtLmdldE1lYXN1cmVkV2lkdGgoKS8xLjIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJOb3RpZnkgcGVyZm9ybSBsZWZ0IGFjdGlvblwiKTtcbiAgICB9IGVsc2UgaWYgKGFyZ3MuZGF0YS54IDwgLXJpZ2h0SXRlbS5nZXRNZWFzdXJlZFdpZHRoKCkvMS4yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTm90aWZ5IHBlcmZvcm0gcmlnaHQgYWN0aW9uXCIpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uU3dpcGVDZWxsU3RhcnRlZChhcmdzOiBsaXN0Vmlld01vZHVsZS5Td2lwZUFjdGlvbnNFdmVudERhdGEpIHtcbiAgICB2YXIgc3dpcGVMaW1pdHMgPSBhcmdzLmRhdGEuc3dpcGVMaW1pdHM7XG4gICAgdmFyIHN3aXBlVmlldyA9IGFyZ3Mub2JqZWN0O1xuICAgIHZhciBsZWZ0SXRlbSA9IHN3aXBlVmlldy5nZXRWaWV3QnlJZDx2aWV3TW9kdWxlLlZpZXc+KCdtYXJrLXZpZXcnKTtcbiAgICB2YXIgcmlnaHRJdGVtID0gc3dpcGVWaWV3LmdldFZpZXdCeUlkPHZpZXdNb2R1bGUuVmlldz4oJ2RlbGV0ZS12aWV3Jyk7XG4gICAgc3dpcGVMaW1pdHMubGVmdCA9IGxlZnRJdGVtLmdldE1lYXN1cmVkV2lkdGgoKTtcbiAgICBzd2lwZUxpbWl0cy5yaWdodCA9IHJpZ2h0SXRlbS5nZXRNZWFzdXJlZFdpZHRoKCk7XG4gICAgc3dpcGVMaW1pdHMudGhyZXNob2xkID0gbGVmdEl0ZW0uZ2V0TWVhc3VyZWRXaWR0aCgpIC8gMjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uU3dpcGVDZWxsRmluaXNoZWQoYXJnczogbGlzdFZpZXdNb2R1bGUuU3dpcGVBY3Rpb25zRXZlbnREYXRhKSB7XG4gICAgY29uc29sZS5sb2coXCJvblN3aXBlQ2VsbEZpbmlzaGVkXCIpO1xuICAgIHZhciBsaXN0VmlldyA9IDxsaXN0Vmlld01vZHVsZS5SYWRMaXN0Vmlldz5mcmFtZU1vZHVsZS50b3Btb3N0KCkuY3VycmVudFBhZ2UuZ2V0Vmlld0J5SWQoXCJsaXN0Vmlld1wiKTtcbiAgICBsaXN0Vmlldy5ub3RpZnlTd2lwZVRvRXhlY3V0ZUZpbmlzaGVkKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkxlZnRTd2lwZUNsaWNrKGFyZ3M6IGxpc3RWaWV3TW9kdWxlLkxpc3RWaWV3RXZlbnREYXRhKSB7XG4gICAgdmFyIGxpc3RWaWV3ID0gPGxpc3RWaWV3TW9kdWxlLlJhZExpc3RWaWV3PmZyYW1lTW9kdWxlLnRvcG1vc3QoKS5jdXJyZW50UGFnZS5nZXRWaWV3QnlJZChcImxpc3RWaWV3XCIpO1xuICAgIGNvbnNvbGUubG9nKFwiTGVmdCBzd2lwZSBjbGlja1wiKTtcbiAgICBsaXN0Vmlldy5ub3RpZnlTd2lwZVRvRXhlY3V0ZUZpbmlzaGVkKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvblJpZ2h0U3dpcGVDbGljayhhcmdzKSB7XG4gICAgdmFyIGxpc3RWaWV3ID0gPGxpc3RWaWV3TW9kdWxlLlJhZExpc3RWaWV3PmZyYW1lTW9kdWxlLnRvcG1vc3QoKS5jdXJyZW50UGFnZS5nZXRWaWV3QnlJZChcImxpc3RWaWV3XCIpO1xuICAgIGNvbnNvbGUubG9nKFwiUmlnaHQgc3dpcGUgY2xpY2tcIik7XG4gICAgdmFyIHZpZXdNb2RlbDogdmlld01vZGVsLlZpZXdNb2RlbCA9IDx2aWV3TW9kZWwuVmlld01vZGVsPmxpc3RWaWV3LmJpbmRpbmdDb250ZXh0O1xuICAgIHZpZXdNb2RlbC5kYXRhSXRlbXMuc3BsaWNlKHZpZXdNb2RlbC5kYXRhSXRlbXMuaW5kZXhPZihhcmdzLm9iamVjdC5iaW5kaW5nQ29udGV4dCksIDEpO1xufVxuIl19